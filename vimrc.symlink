set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
let g:ale_emit_conflict_warnings = 0
call vundle#begin()

Plugin 'VimVundle/VimVundle'
Plugin 'scrooloose/nerdtree'
Plugin 'airblade/vim-gitgutter'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'editorconfig/editorconfig-vim'
" Plugin 'SirVer/ultisnips'
" Plugin 'honza/vim-snippets'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-repeat'
Plugin 'dhruvasagar/vim-table-mode'
Plugin 'tomtom/tcomment_vim'
Plugin 'Yggdroot/indentLine'
Plugin 'jez/vim-superman'
Plugin '1995eaton/vim-better-javascript-completion'
Plugin 'Chiel92/vim-autoformat'
Plugin 'kshenoy/vim-signature'
Plugin 'jreybert/vimagit'
Plugin 'tpope/vim-dispatch'
Plugin 'kristijanhusak/vim-multiple-cursors'
Plugin 'ap/vim-css-color'
Plugin 'nanotech/jellybeans.vim'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'godlygeek/tabular'
Plugin 'vimwiki/vimwiki'
Plugin 'Raimondi/delimitMate'
Plugin 'Shougo/denite.nvim'
Plugin 'mattn/webapi-vim'   " required by gist-vim
Plugin 'mattn/gist-vim'
" syntax
Plugin 'othree/html5.vim'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'rust-lang/rust.vim'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'PotatoesMaster/i3-vim-syntax'
Plugin 'kchmck/vim-coffee-script'
Plugin 'mxw/vim-jsx'
Plugin 'othree/yajs.vim'
Plugin 'wavded/vim-stylus'
Plugin 'heavenshell/vim-jsdoc'
Plugin 'elzr/vim-json'
Plugin 'othree/jsdoc-syntax.vim'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'vlaadbrain/gnuplot.vim'
Plugin 'cespare/vim-toml'
" linting
Plugin 'w0rp/ale'
Plugin 'davidbeckingsale/writegood.vim'

call vundle#end()
filetype plugin indent on
syntax on

colorscheme jellybeans

" settings for vim-airline
let g:airline_theme = 'jellybeans'
let g:airline_powerline_fonts = 1
" let g:airline_left_sep =  ""
" let g:airline_right_sep = ""
let g:airline#extensions#tabline#enabled = 1

"
" settings for ultisnips
" https://github.com/SirVer/ultisnips
"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-x>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" if I want :UltiSnipsEdit to split my window
let g:UltiSnipsEditSplit="vertical"

" settings for indentLine
let g:indentLine_char = '│'
let g:indentLine_color_term = 239
let g:indentLine_faster = 1
let g:indentLine_conceal = 0

" settings for vim-coffee-script
let coffee_linter = '/usr/bin/coffeelint'

" settings for vim-jsdoc
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_enable_es6 = 1

" settings for vim-better-javascript-completion
let g:vimjs#casesensitive = 0
let g:vimjs#smartcomplete = 1

" settings for vim-json
let g:vim_json_syntax_conceal = 0

" settings for javascript-libraries-syntax
let g:used_javascript_libs = 'jquery,react'

" settings for vim-autoformat
noremap <F3> :Autoformat<CR>

" settings for vim-multiple-cursors
let g:multi_cursor_exit_from_insert_mode = 0
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_insert_maps = { ',': 1 }
let g:multi_cursor_normal_maps = { 'd': 1 }

" settings for ALE
let g:ale_linter_aliases = {
\   'bash': 'sh',
\   'csh': 'sh',
\   'sass': 'css',
\   'scss': 'css',
\   'zsh': 'sh',
\}
let g:ale_linters = {
\   'c': ['gcc'],
\   'coffeescript': ['coffeelint'],
\   'css': ['stylelint'],
\   'javascript': ['eslint'],
\   'markdown': ['proselint'],
\   'ruby': ['rubocop'],
\   'rust': ['rustc'],
\   'text': ['proselint'],
\}

" settings for easytags
let g:easytags_events = ['BufWritePost']

" settings for vimwiki
let wiki = {}
let wiki.path = '~/wiki'
let wiki.automatic_nested_syntaxes = 1
let g:vimwiki_list = [wiki]

" settings for delimitMate
let delimitMate_offByDefault = 0

" settings for denite / Unite
nnoremap <C-p>b :Denite buffer<CR>
nnoremap <C-p>d :Denite directory_rec<CR>
nnoremap <C-p>f :Denite file_rec<CR>
nnoremap <C-p>g :Denite grep<CR>
nnoremap <C-p>h :Denite help<CR>
nnoremap <C-p>l :Denite line<CR>
nnoremap <C-p>t :Denite filetype<CR>
" use <C-j>, <C-k> to navigate results
call denite#custom#map(
      \ 'insert',
      \ '<C-J>',
      \ '<denite:move_to_next_line>',
      \ 'noremap'
      \)
call denite#custom#map(
      \ 'insert',
      \ '<C-K>',
      \ '<denite:move_to_previous_line>',
      \ 'noremap'
      \)
" use ripgrep as grepper
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts',
        \ ['-i', '--vimgrep', '--no-headings'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['-e'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', ['.'])

" settings for gist-vim
if has('unix')
  if has('mac')
    let g:gist_clip_command = 'pbcopy'
  else
    let g:gist_clip_command = 'xclip -selection clipboard'
  endif
else
  let g:gist_clip_command = 'putclip'
endif
let g:gist_detect_filetype = 1
let g:gist_show_privates = 1
let g:gist_post_private = 0
let g:gist_post_anonymous = 0
let g:gist_get_multiplefile = 1


"
" my custom settings
"
"
set autoindent
set encoding=utf-8
set mouse=a
set backspace=indent,eol,start
set spelllang=en_us
" toggle spellcheck with <F7> in Normal mode
nnoremap <F7> :set spell!<CR>
" toggle auto indenting for code paste
set pastetoggle=<F2>
set concealcursor=""         "cocu: disable conceal for current line
set vb t_vb=                 " disable beeps and flashes

"
" Folding
"
set foldmethod=syntax        "fdm: fold by the indentation by default
set foldnestmax=10           "fdn: deepest fold is 10 levels
set nofoldenable             "nofen: don't fold by default
set foldlevel=1

"
" Search
"
set incsearch                "is: show currently matching searches
set nohlsearch

"
" Tabs
"
set tabstop=4                "ts: number of spaces that a tab renders as
set shiftwidth=4             "sw: number of spaces to use for autoindent
set softtabstop=4            "sts: number of spaces that tabs insert
set smarttab                 "sta: helps with backspacing because of expandtab
set expandtab                "et: uses spaces instead of tab characters

"
" HUD and status info
"
set cursorline               "cul: highlight cursor line
set laststatus=2             "ls: makes the status bar always visible
set lazyredraw               "lz: will not redraw the screen while running macros
set linebreak                "lbr: break lines at word boundary
set list
set listchars=eol:¬,tab:▸\ ,trail:~,extends:>,precedes:<
set number                   "nu: numbers lines
set numberwidth=2            "nuw: width of number column
set relativenumber           "rnu: line numbers relative to current line
set cmdheight=1              "ch: make a little more room for error messages
set scrolloff=4              "so: places a couple lines between the current line and the screen edge
set sidescroll=10
set sidescrolloff=4          "siso: places a couple lines between the current column and the screen edge
set ttyfast                  "tf: improves redrawing for newer computers
set wrap

if has('linebreak')
  try
    set breakindent          "bri: visually indent wrapped lines
    let showbreak='↳'
  catch /E518:/
    " unknown option: break indent
  endtry
endif

" lead with ,
let mapleader = ","

" toggle nerdtree with ,e
:nmap ,e :NERDTreeToggle<CR>

" ,s will strip whitespaces
function! StripWhitespace ()
  exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>
