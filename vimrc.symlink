" vim: ft=vim
set nocompatible

" automatically install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

" completion and snippet engine
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/neosnippet.vim'
" snippet lists
Plug 'Shougo/neosnippet-snippets'
Plug 'fszymanski/deoplete-emoji'
Plug 'honza/vim-snippets'
" completion sources
Plug 'zchee/deoplete-jedi'
Plug 'sebastianmarkow/deoplete-rust'

" Language Server
Plug 'autozimu/LanguageClient-neovim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/echodoc.vim'

Plug 'Shougo/context_filetype.vim'    " detect other filetype inside others

Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-repeat'
Plug 'dhruvasagar/vim-table-mode'
Plug 'tomtom/tcomment_vim'
Plug 'Yggdroot/indentLine'
Plug 'jez/vim-superman'
Plug '1995eaton/vim-better-javascript-completion'
Plug 'Chiel92/vim-autoformat'
Plug 'kshenoy/vim-signature'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-dispatch'
Plug 'kristijanhusak/vim-multiple-cursors'
Plug 'ap/vim-css-color'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-easytags'
Plug 'godlygeek/tabular'
Plug 'vimwiki/vimwiki'
Plug 'jiangmiao/auto-pairs'
Plug 'Shougo/denite.nvim'
Plug 'mattn/gist-vim'
  Plug 'mattn/webapi-vim'   " required by gist-vim
Plug 'nelstrom/vim-visual-star-search'
Plug 'kana/vim-textobj-user'
  Plug 'fvictorio/vim-textobj-backticks'
  Plug 'sgur/vim-textobj-parameter'
  Plug 'kana/vim-textobj-indent'
  Plug 'Julian/vim-textobj-variable-segment'
  Plug 'thinca/vim-textobj-between'
Plug 'reedes/vim-pencil'
Plug 'reedes/vim-wordy'
Plug 'machakann/vim-highlightedyank'
" syntax
Plug 'python-mode/python-mode', { 'for': 'python' }
Plug 'othree/html5.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'rust-lang/rust.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'kchmck/vim-coffee-script'
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'wavded/vim-stylus'
Plug 'heavenshell/vim-jsdoc'  " generates JSDoc
Plug 'elzr/vim-json'
Plug 'othree/jsdoc-syntax.vim'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'vlaadbrain/gnuplot.vim'
Plug 'cespare/vim-toml'
Plug 'plasticboy/vim-markdown'
Plug 'slim-template/vim-slim'
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'vim-scripts/bats.vim', { 'for': 'bats' }
Plug 'Rykka/riv.vim', { 'for': 'rst' }
Plug 'aklt/plantuml-syntax', { 'for': 'plantuml' }
" linting
Plug 'w0rp/ale'
Plug 'davidbeckingsale/writegood.vim'
" colorschemes
Plug 'nanotech/jellybeans.vim'
Plug 'morhetz/gruvbox'
Plug 'rakr/vim-one'
Plug 'trevordmiller/nova-vim'
Plug 'hzchirs/vim-material'

call plug#end()

set background=dark
colorscheme vim-material
set termguicolors

" settings for context_filetype
if !exists('g:context_filetype#same_filetypes')
    let g:context_filetype#same_filetypes = {}
endif
" In c buffers, completes from cpp and d buffers.
let g:context_filetype#same_filetypes.c = 'cpp,d'
" In cpp buffers, completes from c buffers.
let g:context_filetype#same_filetypes.cpp = 'c'
" In gitconfig buffers, completes from all buffers.
let g:context_filetype#same_filetypes.gitconfig = '_'
" In default, completes from all buffers.
let g:context_filetype#same_filetypes._ = '_'

" settings for deoplete-rust
let g:deoplete#sources#rust#racer_binary = '/bin/racer'
let g:deoplete#sources#rust#rust_source_path = '$RUST_SRC_PATH'

" settings for vim-airline
let g:airline_theme = 'material'
let g:airline_powerline_fonts = 0
let g:airline_left_sep =  ""
let g:airline_right_sep = ""
let g:airline_skip_empty_sections = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1

" settings for indentLine
let g:indentLine_char = 'â”Š'
let g:indentLine_color_term = 239
let g:indentLine_faster = 1

" settings for vim-coffee-script
let g:coffee_linter = '/usr/bin/coffeelint'

" settings for vim-jsdoc
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_enable_es6 = 1

" settings for vim-better-javascript-completion
let g:vimjs#casesensitive = 0
let g:vimjs#smartcomplete = 1

" settings for vim-json
let g:vim_json_syntax_conceal = 0

" settings for javascript-libraries-syntax
let g:used_javascript_libs = 'jquery,react'

" settings for vim-autoformat
noremap <F3> :Autoformat<CR>

" settings for vim-multiple-cursors
let g:multi_cursor_exit_from_insert_mode = 0
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_insert_maps = { ',': 1 }
let g:multi_cursor_normal_maps = { 'd': 1 }

" settings for ALE
let g:ale_linter_aliases = {
\   'bash': 'sh',
\   'csh': 'sh',
\   'sass': 'css',
\   'scss': 'css',
\   'zsh': 'sh',
\}

" settings for easytags
let g:easytags_events = ['BufWritePost']
set tags=./tags
let g:easytags_dynamic_files = 1

" settings for vimwiki
let g:vimwiki_list = [
      \{
        \ 'path': '~/Dropbox/wiki'
      \},
      \{
      \   'path': "~/Dropbox/DnD/Dragon's Despair"
      \},
      \{
      \   'path': '~/wiki'
      \}
      \]

" settings for deoplete
let g:deoplete#enable_at_startup = 1

" settings for neosnippet
let g:neosnippet#enable_completed_snippet = 1
" disable
let g:neosnippet#disable_runtime_snippets = {
      \ '_': 1
      \}
let g:neosnippet#enable_smart_case = 1
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory = '~/.vim/bundle/vim-snippets/snippets'
" Plugin key-mappings.
" Note: It must be 'imap' and 'smap'.  It uses <Plug> mappings.
" imap <C-k>     <Plug>(neosnippet_expand_or_jump)
" smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
" SuperTab like snippets' behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <expr><TAB>
  \ pumvisible() ? "\<C-n>" :
  \ neosnippet#expandable_or_jumpable() ?
  \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" resolve auto-pairs confilict for insert mode mapping to <CR>
let g:AutoPairsMapCR = 0
" Expand the completed snippet trigger by <CR>.
imap <expr><CR>
  \ (pumvisible() && neosnippet#expandable()) ?
  \ "\<Plug>(neosnippet_expand)" : pumvisible() ?
  \   deoplete#close_popup() : "\<CR>\<Plug>AutoPairsReturn"
" undo completion with <C-g>
inoremap <expr><C-g> deoplete#undo_completion()
" disable buffer source
let g:deoplete#ignore_sources =  {}
let g:deoplete#ignore_sources._ = ['buffer']
" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" settings for deoplete-emoji
call deoplete#custom#set('emoji', 'filetypes', ['rst', 'markdown', 'gitcommit'])

" settings for denite / Unite
nnoremap <C-p>b :Denite buffer<CR>
nnoremap <C-p>d :Denite directory_rec<CR>
nnoremap <C-p>f :Denite file_rec<CR>
nnoremap <C-p>g :Denite grep<CR>
nnoremap <C-p>h :Denite help<CR>
nnoremap <C-p>l :Denite line<CR>
nnoremap <C-p>t :Denite filetype<CR>
" use <C-j>, <C-k> to navigate results
call denite#custom#map(
      \ 'insert',
      \ '<C-j>',
      \ '<denite:move_to_next_line>',
      \ 'noremap'
      \)
call denite#custom#map(
      \ 'insert',
      \ '<C-k>',
      \ '<denite:move_to_previous_line>',
      \ 'noremap'
      \)
" use ripgrep as grepper
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts',
        \ ['-i', '--vimgrep', '--no-headings'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['-e'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', ['.'])

" settings for gist-vim
if has('unix')
  if has('mac')
    let g:gist_clip_command = 'pbcopy'
  else
    let g:gist_clip_command = 'xclip -selection clipboard'
  endif
else
  let g:gist_clip_command = 'putclip'
endif
let g:gist_detect_filetype = 1
let g:gist_show_privates = 1
let g:gist_post_private = 0
let g:gist_post_anonymous = 0
let g:gist_get_multiplefile = 1

" settings for plasticboy/vim-markdown
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_fenced_languages = [
      \ 'bash=sh',
      \ 'csharp=cs',
      \ 'js=javascript',
      \ 'py=python'
      \]
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_toml_frontmatter = 1
let g:vim_markdown_json_frontmatter = 1
let g:vim_markdown_new_list_item_indent = 0

" settings for vim-pencil
let g:pencil#map#suspend_af = 'K'
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  autocmd FileType text call pencil#init({ 'wrap': 'hard' })
  autocmd FileType git,*commit* call pencil#init({
        \ 'wrap': 'hard'
        \ })
augroup end

" settings for python-mode
let g:pymode_python = 'python3'
let g:pymode_rope_goto_definition_bind = '<C-]>'

" settings for LanguageClient
let g:LanguageClient_serverCommands = {
      \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
      \ }
let g:LanguageClient_autoStart = 1
" nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>

" settings for machakann/vim-highlightedyank
if !has('nvim')
  map y <Plug>(highlightedyank)
endif


"
" my custom settings
"
"
set hidden
set autoindent
set encoding=utf-8
set fileencoding=utf-8
set mouse=a
set backspace=indent,eol,start
set spelllang=en_us
" toggle spellcheck with <F7> in Normal mode
nnoremap <F7> :set spell!<CR>
" toggle auto indenting for code paste
set pastetoggle=<F2>
set concealcursor=v          "cocu: disable conceal for current line
set visualbell t_vb=         " disable beeps and flashes
set inccommand=split

"
" Folding
"
set foldmethod=marker        "fdm: fold by the indentation by default
set foldnestmax=10           "fdn: deepest fold is 10 levels
set nofoldenable             "nofen: don't fold by default
set foldlevel=1

"
" Search
"
set incsearch                "is: show currently matching searches
set smartcase                "scs: override 'ignorecase' if pattern has Capital
" toggle search highlight
nnoremap ./ :set hlsearch!<CR>

"
" Tabs
"
set tabstop=4                "ts: number of spaces that a tab renders as
set shiftwidth=4             "sw: number of spaces to use for autoindent
set softtabstop=4            "sts: number of spaces that tabs insert
set smarttab                 "sta: helps with backspacing because of expandtab
set expandtab                "et: uses spaces instead of tab characmers

"
" HUD and status info
"
set cmdheight=1              "ch: make a little more room for error messages
set cursorline               "cul: highlight cursor line
set laststatus=2             "ls: makes the status bar always visible
set lazyredraw               "lz: will not redraw the screen while running macros
set linebreak                "lbr: break lines at word boundary
set list
set listchars=eol:Â¬,tab:â–¸\ ,trail:~,extends:>,precedes:<
set noshowmode
set number                   "nu: numbers lines
set numberwidth=2            "nuw: width of number column
set relativenumber           "rnu: line numbers relative to current line
set scrolloff=4              "so: places a couple lines between the current line and the screen edge
set sidescroll=10
set sidescrolloff=4          "siso: places a couple lines between the current column and the screen edge
set ttyfast                  "tf: improves redrawing for newer computers
set wrap

if has('linebreak')
  try
    set breakindent          "bri: visually indent wrapped lines
    let g:showbreak='â†³'
  catch /E518:/
    " unknown option: break indent
  endtry
endif

" lead with ,
let g:mapleader = ','

" toggle nerdtree with ,e
nmap <leader>e :NERDTreeToggle<CR>

" ,s will strip whitespaces
function! StripWhitespace ()
  exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace()<CR>

" move by visual line unless count specified
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" automatically equalize splits when vim is resized
autocmd VimResized * wincmd =

" persistent undo
set undofile                 " maintain undo history between sessions
set undodir=~/.vim/undodir

" prints the highlighting groups where the cursor is
nmap <F9> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists('*synstack')
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

if has('nvim')
  " Terminal mode:
  tnoremap <M-h> <C-\><C-n><C-w>h
  tnoremap <M-j> <C-\><C-n><C-w>j
  tnoremap <M-k> <C-\><C-n><C-w>k
  tnoremap <M-l> <C-\><C-n><C-w>l
  " Insert mode:
  inoremap <M-h> <Esc><C-w>h
  inoremap <M-j> <Esc><C-w>j
  inoremap <M-k> <Esc><C-w>k
  inoremap <M-l> <Esc><C-w>l
  " Visual mode:
  vnoremap <M-h> <Esc><C-w>h
  vnoremap <M-j> <Esc><C-w>j
  vnoremap <M-k> <Esc><C-w>k
  vnoremap <M-l> <Esc><C-w>l
  " Normal mode:
  nnoremap <M-h> <C-w>h
  nnoremap <M-j> <C-w>j
  nnoremap <M-k> <C-w>k
  nnoremap <M-l> <C-w>l
endif
