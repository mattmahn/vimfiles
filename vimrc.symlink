" vim: ft=vim
set nocompatible

" automatically install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

Plug 'airblade/vim-gitgutter'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'editorconfig/editorconfig-vim'
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-repeat'
Plug 'dhruvasagar/vim-table-mode'
Plug 'tomtom/tcomment_vim'
Plug 'Yggdroot/indentLine'
Plug 'jez/vim-superman'
Plug '1995eaton/vim-better-javascript-completion'
Plug 'Chiel92/vim-autoformat'
Plug 'kshenoy/vim-signature'
Plug 'jreybert/vimagit'
Plug 'tpope/vim-dispatch'
Plug 'kristijanhusak/vim-multiple-cursors'
Plug 'ap/vim-css-color'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-easytags'
Plug 'godlygeek/tabular'
Plug 'vimwiki/vimwiki'
Plug 'jiangmiao/auto-pairs'
Plug 'Shougo/denite.nvim'
Plug 'mattn/gist-vim'
  Plug 'mattn/webapi-vim'   " required by gist-vim
Plug 'nelstrom/vim-visual-star-search'
" syntax
Plug 'othree/html5.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'rust-lang/rust.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'kchmck/vim-coffee-script'
Plug 'mxw/vim-jsx'
Plug 'othree/yajs.vim'
Plug 'wavded/vim-stylus'
Plug 'heavenshell/vim-jsdoc'
Plug 'elzr/vim-json'
Plug 'othree/jsdoc-syntax.vim'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'vlaadbrain/gnuplot.vim'
Plug 'cespare/vim-toml'
Plug 'plasticboy/vim-markdown'
" linting
Plug 'w0rp/ale'
Plug 'davidbeckingsale/writegood.vim'
" colorschemes
Plug 'nanotech/jellybeans.vim'
Plug 'morhetz/gruvbox'
Plug 'rakr/vim-one'
Plug 'zanglg/nova.vim'

call plug#end()

set background=light
colorscheme one

" settings for vim-airline
let g:airline_theme = 'one'
let g:airline_powerline_fonts = 1
" let g:airline_left_sep =  ""
" let g:airline_right_sep = ""
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1

"
" settings for ultisnips
" https://github.com/SirVer/ultisnips
"
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<c-x>'
let g:UltiSnipsJumpBackwardTrigger='<c-z>'
" if I want :UltiSnipsEdit to split my window
let g:UltiSnipsEditSplit='vertical'

" settings for indentLine
let g:indentLine_char = '│'
let g:indentLine_color_term = 239
let g:indentLine_faster = 1
let g:indentLine_conceal = 0

" settings for vim-coffee-script
let g:coffee_linter = '/usr/bin/coffeelint'

" settings for vim-jsdoc
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_enable_es6 = 1

" settings for vim-better-javascript-completion
let g:vimjs#casesensitive = 0
let g:vimjs#smartcomplete = 1

" settings for vim-json
let g:vim_json_syntax_conceal = 0

" settings for javascript-libraries-syntax
let g:used_javascript_libs = 'jquery,react'

" settings for vim-autoformat
noremap <F3> :Autoformat<CR>

" settings for vim-multiple-cursors
let g:multi_cursor_exit_from_insert_mode = 0
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_insert_maps = { ',': 1 }
let g:multi_cursor_normal_maps = { 'd': 1 }

" settings for ALE
let g:ale_linter_aliases = {
\   'bash': 'sh',
\   'csh': 'sh',
\   'sass': 'css',
\   'scss': 'css',
\   'zsh': 'sh',
\}
let g:ale_linters = {
\   'c': ['gcc'],
\   'coffeescript': ['coffeelint'],
\   'css': ['stylelint'],
\   'javascript': ['eslint'],
\   'markdown': ['proselint'],
\   'ruby': ['rubocop'],
\   'rust': ['rustc'],
\   'text': ['proselint'],
\}

" settings for easytags
let g:easytags_events = ['BufWritePost']

" settings for vimwiki
let g:vimwiki_list = [
      \{
        \ 'path': '~/Dropbox/wiki',
        \ 'automatic_nested_syntaxes': 1
      \},
      \{
      \   'path': "~/Dropbox/DnD/Dragon's Despair",
      \   'automatic_nested_syntaxes': 1
      \}
      \]

" settings for denite / Unite
nnoremap <C-p>b :Denite buffer<CR>
nnoremap <C-p>d :Denite directory_rec<CR>
nnoremap <C-p>f :Denite file_rec<CR>
nnoremap <C-p>g :Denite grep<CR>
nnoremap <C-p>h :Denite help<CR>
nnoremap <C-p>l :Denite line<CR>
nnoremap <C-p>t :Denite filetype<CR>
" use <C-j>, <C-k> to navigate results
call denite#custom#map(
      \ 'insert',
      \ '<C-j>',
      \ '<denite:move_to_next_line>',
      \ 'noremap'
      \)
call denite#custom#map(
      \ 'insert',
      \ '<C-k>',
      \ '<denite:move_to_previous_line>',
      \ 'noremap'
      \)
" use ripgrep as grepper
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts',
        \ ['-i', '--vimgrep', '--no-headings'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['-e'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', ['.'])

" settings for gist-vim
if has('unix')
  if has('mac')
    let g:gist_clip_command = 'pbcopy'
  else
    let g:gist_clip_command = 'xclip -selection clipboard'
  endif
else
  let g:gist_clip_command = 'putclip'
endif
let g:gist_detect_filetype = 1
let g:gist_show_privates = 1
let g:gist_post_private = 0
let g:gist_post_anonymous = 0
let g:gist_get_multiplefile = 1

" settings for plasticboy/vim-markdown
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_fenced_languages = [
      \ 'bash=sh',
      \ 'csharp=cs',
      \ 'js=javascript',
      \ 'py=python'
      \]
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_toml_frontmatter = 1
let g:vim_markdown_json_frontmatter = 1
let g:vim_markdown_new_list_item_indent = 0


"
" my custom settings
"
"
set autoindent
set encoding=utf-8
set mouse=a
set backspace=indent,eol,start
set spelllang=en_us
" toggle spellcheck with <F7> in Normal mode
nnoremap <F7> :set spell!<CR>
" toggle auto indenting for code paste
set pastetoggle=<F2>
set concealcursor=v          "cocu: disable conceal for current line
set visualbell t_vb=                 " disable beeps and flashes

"
" Folding
"
set foldmethod=syntax        "fdm: fold by the indentation by default
set foldnestmax=10           "fdn: deepest fold is 10 levels
set nofoldenable             "nofen: don't fold by default
set foldlevel=1

"
" Search
"
set incsearch                "is: show currently matching searches
set nohlsearch

"
" Tabs
"
set tabstop=4                "ts: number of spaces that a tab renders as
set shiftwidth=4             "sw: number of spaces to use for autoindent
set softtabstop=4            "sts: number of spaces that tabs insert
set smarttab                 "sta: helps with backspacing because of expandtab
set expandtab                "et: uses spaces instead of tab characters

"
" HUD and status info
"
set cursorline               "cul: highlight cursor line
set laststatus=2             "ls: makes the status bar always visible
set lazyredraw               "lz: will not redraw the screen while running macros
set linebreak                "lbr: break lines at word boundary
set list
set listchars=eol:¬,tab:▸\ ,trail:~,extends:>,precedes:<
set number                   "nu: numbers lines
set numberwidth=2            "nuw: width of number column
set relativenumber           "rnu: line numbers relative to current line
set cmdheight=1              "ch: make a little more room for error messages
set scrolloff=4              "so: places a couple lines between the current line and the screen edge
set sidescroll=10
set sidescrolloff=4          "siso: places a couple lines between the current column and the screen edge
set ttyfast                  "tf: improves redrawing for newer computers
set wrap

if has('linebreak')
  try
    set breakindent          "bri: visually indent wrapped lines
    let g:showbreak='↳'
  catch /E518:/
    " unknown option: break indent
  endtry
endif

" lead with ,
let g:mapleader = ','

" toggle nerdtree with ,e
nmap ,e :NERDTreeToggle<CR>

" ,s will strip whitespaces
function! StripWhitespace ()
  exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace()<CR>

" move by visual line unless count specified
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" automatically equalize splits when vim is resized
autocmd VimResized * wincmd =

" persistent undo
set undofile                 " maintain undo history between sessions
set undodir=~/.vim/undodir
